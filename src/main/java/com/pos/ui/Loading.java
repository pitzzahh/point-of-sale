/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.pos.ui;

import static com.pos.ui.Main.OS_NAME;
import java.awt.Color;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author peter
 */
public class Loading extends javax.swing.JFrame {
    
    public final int LOGGING_OUT = 1;
    public final int LOADING_PRODUCTS = 2;
    public final int LOADING_REVENUE = 3;
    /**
     * Creates new form Loading
     */
    public Loading() {
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        message = new javax.swing.JLabel();
        percentage = new javax.swing.JLabel();
        header = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(0, 102, 102));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        mainPanel.add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 390, 20));

        message.setForeground(new java.awt.Color(255, 255, 255));
        message.setText("LOADING");
        mainPanel.add(message, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 250, 30));

        percentage.setForeground(new java.awt.Color(255, 255, 255));
        percentage.setText("100 %");
        mainPanel.add(percentage, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 40, 30));

        header.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        header.setForeground(new java.awt.Color(204, 204, 204));
        header.setText("PLEASE WAIT");
        mainPanel.add(header, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void start(int whatType) {
    
        // Checks if the current operating system is a Windows operating system
        // Windows theme for Windows machines
        // Nimbus theme for non Windows machines
        try {
            if (OS_NAME.startsWith("WINDOWS")) {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Windows".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }
            else {
                for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            }

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        final Random RANDOM = new Random();
        
        ManageProducts manageProducts = null;
        ViewRevenue viewRevenue = null;
                        
        try {
            for(int i = 0; i <= 100; i++ ) {
                Thread.sleep(RANDOM.nextInt(100) + 1);
                percentage.setText(i + " %");
                switch(i) {
                    case 5 -> {
                        message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADING" : "LOGGING OUT");
                        progressBar.setBackground(Color.red);
                    }
                    case 6 -> message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADING." : "LOGGING OUT.");
                    case 7 -> message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADING.." : "LOGGING OUT..");
                    case 20 -> {
                        message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADING..." : "LOGGING OUT...");
                        progressBar.setBackground(Color.yellow);
                    }
                    case 30 -> message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADING..." : "LOGGING OUT...");
                    case 35 -> message.setText((whatType == LOADING_PRODUCTS) ? "READING PRODUCTS LIST." : (whatType == LOADING_REVENUE) ? "READING SALES LIST." : "WRAPPING THINGS UP.");
                    case 40 -> message.setText((whatType == LOADING_PRODUCTS) ? "READING PRODUCTS LIST.." : (whatType == LOADING_REVENUE) ? "READING SALES LIST.." : "WRAPPING THINGS UP..");
                    case 45 -> {
                        message.setText((whatType == LOADING_PRODUCTS) ? "READING PRODUCTS LIST." : (whatType == LOADING_REVENUE) ? "READING SALES LIST..." : "WRAPPING THINGS UP...");
                        if(whatType == LOADING_PRODUCTS) manageProducts = new ManageProducts();
                        if(whatType == LOADING_REVENUE) viewRevenue = new ViewRevenue();
                    }
                    case 64 -> {
                        message.setText((whatType == LOADING_PRODUCTS || whatType == LOADING_REVENUE) ? "LOADED SUCCESSFULLY" : "LOGGING OUT....");
                        progressBar.setBackground(Color.blue);
                        i += RANDOM.nextInt(10) + 1;
                    }
                    case 90 -> message.setText((whatType == LOADING_PRODUCTS) ? "READING PRODUCTS LIST." : (whatType == LOADING_REVENUE) ? "CALCULATING REVENUE." : "WRAPPING THINGS UP....");
                    case 94 -> message.setText((whatType == LOADING_PRODUCTS) ? "OPENING." : (whatType == LOADING_REVENUE) ? "OPENING." : "LOGGED OUT");
                    case 98 -> message.setText((whatType == LOADING_PRODUCTS) ? "OPENING.." : (whatType == LOADING_REVENUE) ? "OPENING.." : "LOGGED OUT");
                    case 100 -> message.setText((whatType == LOADING_PRODUCTS) ? "OPENING..." : (whatType == LOADING_REVENUE) ? "OPENING..." : "LOGGED OUT");
                }
                progressBar.setValue(i);
            }
            dispose();
            if(whatType == LOGGING_OUT) System.exit(0);
            assert manageProducts != null;
            if(whatType == LOADING_PRODUCTS) manageProducts.run();
            assert viewRevenue != null;
            if(whatType == LOADING_REVENUE) viewRevenue.run();
        } catch(InterruptedException interruptedException) {
            JOptionPane.showMessageDialog(null, interruptedException.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel header;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel message;
    private javax.swing.JLabel percentage;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
